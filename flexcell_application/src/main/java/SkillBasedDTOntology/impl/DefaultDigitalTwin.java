package SkillBasedDTOntology.impl;

import SkillBasedDTOntology.*;


import java.net.URI;
import java.util.Collection;
import javax.xml.datatype.XMLGregorianCalendar;

import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.WrappedIndividualImpl;

import org.protege.owl.codegeneration.inference.CodeGenerationInference;

import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLOntology;


/**
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: DefaultDigitalTwin <br>
 * @version generated on Mon Mar 27 14:26:55 CEST 2023 by au698550
 */
public class DefaultDigitalTwin extends WrappedIndividualImpl implements DigitalTwin {

    public DefaultDigitalTwin(CodeGenerationInference inference, IRI iri) {
        super(inference, iri);
    }





    /* ***************************************************
     * Object Property http://www.semanticweb.org/ontologies/cooperativeDTs#cooperatesWith
     */
     
    public Collection<? extends DigitalTwin> getCooperatesWith() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_COOPERATESWITH,
                                               DefaultDigitalTwin.class);
    }

    public boolean hasCooperatesWith() {
	   return !getCooperatesWith().isEmpty();
    }

    public void addCooperatesWith(DigitalTwin newCooperatesWith) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_COOPERATESWITH,
                                       newCooperatesWith);
    }

    public void removeCooperatesWith(DigitalTwin oldCooperatesWith) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_COOPERATESWITH,
                                          oldCooperatesWith);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/ontologies/cooperativeDTs#hasAttribute
     */
     
    public Collection<? extends Attribute> getHasAttribute() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_HASATTRIBUTE,
                                               DefaultAttribute.class);
    }

    public boolean hasHasAttribute() {
	   return !getHasAttribute().isEmpty();
    }

    public void addHasAttribute(Attribute newHasAttribute) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_HASATTRIBUTE,
                                       newHasAttribute);
    }

    public void removeHasAttribute(Attribute oldHasAttribute) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_HASATTRIBUTE,
                                          oldHasAttribute);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/ontologies/cooperativeDTs#hasBehavior
     */
     
    public Collection<? extends Behavior> getHasBehavior() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_HASBEHAVIOR,
                                               DefaultBehavior.class);
    }

    public boolean hasHasBehavior() {
	   return !getHasBehavior().isEmpty();
    }

    public void addHasBehavior(Behavior newHasBehavior) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_HASBEHAVIOR,
                                       newHasBehavior);
    }

    public void removeHasBehavior(Behavior oldHasBehavior) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_HASBEHAVIOR,
                                          oldHasBehavior);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/ontologies/cooperativeDTs#hasDevicePrimitive
     */
     
    public Collection<? extends DevicePrimitive> getHasDevicePrimitive() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_HASDEVICEPRIMITIVE,
                                               DefaultDevicePrimitive.class);
    }

    public boolean hasHasDevicePrimitive() {
	   return !getHasDevicePrimitive().isEmpty();
    }

    public void addHasDevicePrimitive(DevicePrimitive newHasDevicePrimitive) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_HASDEVICEPRIMITIVE,
                                       newHasDevicePrimitive);
    }

    public void removeHasDevicePrimitive(DevicePrimitive oldHasDevicePrimitive) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_HASDEVICEPRIMITIVE,
                                          oldHasDevicePrimitive);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/ontologies/cooperativeDTs#hasDigitalTwinRelationship
     */
     
    public Collection<? extends DigitalTwin> getHasDigitalTwinRelationship() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_HASDIGITALTWINRELATIONSHIP,
                                               DefaultDigitalTwin.class);
    }

    public boolean hasHasDigitalTwinRelationship() {
	   return !getHasDigitalTwinRelationship().isEmpty();
    }

    public void addHasDigitalTwinRelationship(DigitalTwin newHasDigitalTwinRelationship) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_HASDIGITALTWINRELATIONSHIP,
                                       newHasDigitalTwinRelationship);
    }

    public void removeHasDigitalTwinRelationship(DigitalTwin oldHasDigitalTwinRelationship) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_HASDIGITALTWINRELATIONSHIP,
                                          oldHasDigitalTwinRelationship);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/ontologies/cooperativeDTs#hasOperation
     */
     
    public Collection<? extends Operation> getHasOperation() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_HASOPERATION,
                                               DefaultOperation.class);
    }

    public boolean hasHasOperation() {
	   return !getHasOperation().isEmpty();
    }

    public void addHasOperation(Operation newHasOperation) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_HASOPERATION,
                                       newHasOperation);
    }

    public void removeHasOperation(Operation oldHasOperation) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_HASOPERATION,
                                          oldHasOperation);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/ontologies/cooperativeDTs#hasRelationship
     */
     
    public Collection<? extends Relationship> getHasRelationship() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_HASRELATIONSHIP,
                                               DefaultRelationship.class);
    }

    public boolean hasHasRelationship() {
	   return !getHasRelationship().isEmpty();
    }

    public void addHasRelationship(Relationship newHasRelationship) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_HASRELATIONSHIP,
                                       newHasRelationship);
    }

    public void removeHasRelationship(Relationship oldHasRelationship) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_HASRELATIONSHIP,
                                          oldHasRelationship);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/ontologies/cooperativeDTs#hasSkill
     */
     
    public Collection<? extends Skill> getHasSkill() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_HASSKILL,
                                               DefaultSkill.class);
    }

    public boolean hasHasSkill() {
	   return !getHasSkill().isEmpty();
    }

    public void addHasSkill(Skill newHasSkill) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_HASSKILL,
                                       newHasSkill);
    }

    public void removeHasSkill(Skill oldHasSkill) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_HASSKILL,
                                          oldHasSkill);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/ontologies/cooperativeDTs#hasTask
     */
     
    public Collection<? extends Task> getHasTask() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_HASTASK,
                                               DefaultTask.class);
    }

    public boolean hasHasTask() {
	   return !getHasTask().isEmpty();
    }

    public void addHasTask(Task newHasTask) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_HASTASK,
                                       newHasTask);
    }

    public void removeHasTask(Task oldHasTask) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_HASTASK,
                                          oldHasTask);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/ontologies/cooperativeDTs#isComposedOf
     */
     
    public Collection<? extends DigitalTwin> getIsComposedOf() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_ISCOMPOSEDOF,
                                               DefaultDigitalTwin.class);
    }

    public boolean hasIsComposedOf() {
	   return !getIsComposedOf().isEmpty();
    }

    public void addIsComposedOf(DigitalTwin newIsComposedOf) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_ISCOMPOSEDOF,
                                       newIsComposedOf);
    }

    public void removeIsComposedOf(DigitalTwin oldIsComposedOf) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_ISCOMPOSEDOF,
                                          oldIsComposedOf);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/ontologies/cooperativeDTs#isConnectedTo
     */
     
    public Collection<? extends DigitalTwin> getIsConnectedTo() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_ISCONNECTEDTO,
                                               DefaultDigitalTwin.class);
    }

    public boolean hasIsConnectedTo() {
	   return !getIsConnectedTo().isEmpty();
    }

    public void addIsConnectedTo(DigitalTwin newIsConnectedTo) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_ISCONNECTEDTO,
                                       newIsConnectedTo);
    }

    public void removeIsConnectedTo(DigitalTwin oldIsConnectedTo) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_ISCONNECTEDTO,
                                          oldIsConnectedTo);
    }


    /* ***************************************************
     * Data Property http://www.semanticweb.org/ontologies/cooperativeDTs#hasEndpoint
     */
     
    public Collection<? extends String> getHasEndpoint() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASENDPOINT, String.class);
    }

    public boolean hasHasEndpoint() {
		return !getHasEndpoint().isEmpty();
    }

    public void addHasEndpoint(String newHasEndpoint) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASENDPOINT, newHasEndpoint);
    }

    public void removeHasEndpoint(String oldHasEndpoint) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASENDPOINT, oldHasEndpoint);
    }


    /* ***************************************************
     * Data Property http://www.semanticweb.org/ontologies/cooperativeDTs#hasName
     */
     
    public Collection<? extends String> getHasName() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASNAME, String.class);
    }

    public boolean hasHasName() {
		return !getHasName().isEmpty();
    }

    public void addHasName(String newHasName) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASNAME, newHasName);
    }

    public void removeHasName(String oldHasName) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASNAME, oldHasName);
    }


    /* ***************************************************
     * Data Property http://www.semanticweb.org/ontologies/cooperativeDTs#isComposedDigitalTwin
     */
     
    public Collection<? extends Boolean> getIsComposedDigitalTwin() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_ISCOMPOSEDDIGITALTWIN, Boolean.class);
    }

    public boolean hasIsComposedDigitalTwin() {
		return !getIsComposedDigitalTwin().isEmpty();
    }

    public void addIsComposedDigitalTwin(Boolean newIsComposedDigitalTwin) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_ISCOMPOSEDDIGITALTWIN, newIsComposedDigitalTwin);
    }

    public void removeIsComposedDigitalTwin(Boolean oldIsComposedDigitalTwin) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_ISCOMPOSEDDIGITALTWIN, oldIsComposedDigitalTwin);
    }


}
